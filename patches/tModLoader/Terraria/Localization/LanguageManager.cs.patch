--- src/Terraria/Terraria/Localization/LanguageManager.cs
+++ src/tModLoader/Terraria/Localization/LanguageManager.cs
@@ -9,6 +_,7 @@
 using System.Text.RegularExpressions;
 using System.Threading;
 using Terraria.GameContent;
+using Terraria.ModLoader;
 using Terraria.Utilities;
 
 namespace Terraria.Localization
@@ -16,7 +_,7 @@
 	public class LanguageManager
 	{
 		public static LanguageManager Instance = new LanguageManager();
-		private readonly Dictionary<string, LocalizedText> _localizedTexts = new Dictionary<string, LocalizedText>();
+		internal readonly Dictionary<string, LocalizedText> _localizedTexts = new Dictionary<string, LocalizedText>();
 		private readonly Dictionary<string, List<string>> _categoryGroupedKeys = new Dictionary<string, List<string>>();
 		private GameCulture _fallbackCulture = GameCulture.DefaultCulture;
 
@@ -68,6 +_,9 @@
 				}
 
 				LoadLanguage(culture);
+				if (ActiveCulture != null)
+					ModContent.RefreshModLanguage(culture);
+
 				ActiveCulture = culture;
 				Thread.CurrentThread.CurrentCulture = culture.CultureInfo;
 				Thread.CurrentThread.CurrentUICulture = culture.CultureInfo;
@@ -106,10 +_,13 @@
 			}
 		}
 
-		private void ProcessCopyCommandsInTexts() {
+		internal void ProcessCopyCommandsInTexts() {
-			Regex regex = new Regex("{\\$(\\w+\\.\\w+)}", RegexOptions.Compiled);
+			Regex regex = new Regex(@"{\$([\w\.]+)}", RegexOptions.Compiled);
 			foreach (KeyValuePair<string, LocalizedText> localizedText in _localizedTexts) {
 				LocalizedText value = localizedText.Value;
+				if (value.Value == null)
+					continue;
+
 				for (int i = 0; i < 100; i++) {
 					string text = regex.Replace(value.Value, (Match match) => GetTextValue(match.Groups[1].ToString()));
 					if (text == value.Value)
@@ -118,6 +_,25 @@
 					value.SetValue(text);
 				}
 			}
+		}
+
+		public string RegexPlural(string keyName, int value) {
+			string keyText = Language.GetTextValue(keyName, value);
+			// Singulars should be formatted as *1 thing and should come second in the key.
+			Regex singular = new Regex(@"(?:\*)([\1\ \w]+)(\S+)");
+			// Plural1 should be formatted as #{0} things and should come first in the key.
+			Regex plural1 = new Regex(@"(?:\#)([\{0}\ \w]+)(\S+)");
+			// Plural2 should be formatted as &{0} things and should come third in the key.
+			Regex plural2 = new Regex(@"(?:\&)([\{0}\ \w]+)(\S[^&]+)");
+			Regex regex = value == 1 ? singular : plural1;
+			if (Language.ActiveCulture.LegacyId == (int)GameCulture.CultureName.Russian) {
+				int lN = value % 10;
+				if (lN == 1) regex = singular; // Singular of course.
+				if (lN > 1 && lN < 5) regex = plural1; // Genitive singular case, 2 3 and 4.
+				if ((lN > 4 && lN < 10) || lN == 0 || (value % 100 > 10 && value % 100 < 20)) regex = plural2; // Genitive plural case, 5 6 7 8 9 0 and teens.
+			}
+			string text = regex.Match(keyText).ToString();
+			return text;
 		}
 
 		public void LoadLanguageFromFileText(string fileText) {
