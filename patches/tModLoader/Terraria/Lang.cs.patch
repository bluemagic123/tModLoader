--- src/Terraria\Terraria\Lang.cs
+++ src/tModLoader\Terraria\Lang.cs
@@ -6,6 +_,7 @@
 using Terraria.GameInput;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 
 #if CLIENT
 using Terraria.Map;
@@ -35,14 +_,14 @@
 		[Obsolete("Lang arrays have been replaced with the new Language.GetText system.")]
 		public static LocalizedText[] chestType2 = new LocalizedText[2];
 		public static LocalizedText[] prefix = new LocalizedText[84];
-		public static LocalizedText[] _mapLegendCache;
-		private static LocalizedText[] _itemNameCache = new LocalizedText[3930];
-		private static LocalizedText[] _projectileNameCache = new LocalizedText[714];
-		private static LocalizedText[] _npcNameCache = new LocalizedText[580];
+		public static MapLegend _mapLegendCache;
+		internal static LocalizedText[] _itemNameCache = new LocalizedText[3930];
+		internal static LocalizedText[] _projectileNameCache = new LocalizedText[714];
+		internal static LocalizedText[] _npcNameCache = new LocalizedText[580];
 		private static LocalizedText[] _negativeNpcNameCache = new LocalizedText[65];
-		private static LocalizedText[] _buffNameCache = new LocalizedText[206];
-		private static LocalizedText[] _buffDescriptionCache = new LocalizedText[206];
-		private static ItemTooltip[] _itemTooltipCache = new ItemTooltip[3930];
+		internal static LocalizedText[] _buffNameCache = new LocalizedText[206];
+		internal static LocalizedText[] _buffDescriptionCache = new LocalizedText[206];
+		internal static ItemTooltip[] _itemTooltipCache = new ItemTooltip[3930];
 
 		public static string GetMapObjectName(int id)
 		{
@@ -103,7 +_,7 @@
 
 		public static LocalizedText GetNPCName(int netID)
 		{
-			if (netID > 0 && netID < 580)
+			if (netID > 0 && netID < Lang._npcNameCache.Length)
 			{
 				return Lang._npcNameCache[netID];
 			}
@@ -122,7 +_,7 @@
 		public static LocalizedText GetItemName(int id)
 		{
 			id = (int)ItemID.FromNetId((short)id);
-			if (id > 0 && id < 3930 && Lang._itemNameCache[id] != null)
+			if (id > 0 && id < Lang._itemNameCache.Length && Lang._itemNameCache[id] != null)
 			{
 				return Lang._itemNameCache[id];
 			}
@@ -304,6 +_,11 @@
 			}
 			int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
 			Main.npcChatCornerItem = num;
+			string modText = ItemLoader.AnglerChat(num);
+			if (modText != null)
+			{
+				return modText;
+			}
 			return Language.GetTextValueWith("AnglerQuestText.Quest_" + ItemID.Search.GetName(num), obj);
 		}
 
@@ -444,7 +_,7 @@
 		public static void BuildMapAtlas()
 		{
 #if CLIENT
-			Lang._mapLegendCache = new LocalizedText[MapHelper.LookupCount()];
+			Lang._mapLegendCache = new MapLegend(MapHelper.LookupCount());
 			for (int i = 0; i < Lang._mapLegendCache.Length; i++)
 			{
 				Lang._mapLegendCache[i] = LocalizedText.Empty;

