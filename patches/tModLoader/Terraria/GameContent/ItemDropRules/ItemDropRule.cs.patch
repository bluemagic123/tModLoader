--- src/Terraria/Terraria/GameContent/ItemDropRules/ItemDropRule.cs
+++ src/tModLoader/Terraria/GameContent/ItemDropRules/ItemDropRule.cs
@@ -2,7 +_,7 @@
 {
 	public class ItemDropRule
 	{
-		public static IItemDropRule Common(int itemId, int dropsOutOfX = 1, int minimumDropped = 1, int maximumDropped = 1) => new CommonDrop(itemId, dropsOutOfX, minimumDropped, maximumDropped);
+		public static IItemDropRule Common(int itemId, int dropsOutOfY = 1, int minimumDropped = 1, int maximumDropped = 1, int dropsXoutofY = 1) => new CommonDrop(itemId, dropsOutOfY, minimumDropped, maximumDropped, dropsXoutofY);
 		public static IItemDropRule BossBag(int itemId) => new DropBasedOnExpertMode(DropNothing(), new DropLocalPerClientAndResetsNPCMoneyTo0(itemId, 1, 1, 1, null));
 		public static IItemDropRule BossBagByCondition(IItemDropRuleCondition condition, int itemId) => new DropBasedOnExpertMode(DropNothing(), new DropLocalPerClientAndResetsNPCMoneyTo0(itemId, 1, 1, 1, condition));
 		public static IItemDropRule ExpertGetsRerolls(int itemId, int dropsOutOfX, int expertRerolls) => new DropBasedOnExpertMode(WithRerolls(itemId, 0, dropsOutOfX), WithRerolls(itemId, expertRerolls, dropsOutOfX));
@@ -10,7 +_,7 @@
 		public static IItemDropRule MasterModeDropOnAllPlayers(int itemId, int dropsAtXOutOfY_TheY = 1) => new DropBasedOnMasterMode(DropNothing(), new DropPerPlayerOnThePlayer(itemId, dropsAtXOutOfY_TheY, 1, 1, new Conditions.IsMasterMode()));
 		public static IItemDropRule WithRerolls(int itemId, int rerolls, int dropsOutOfX = 1, int minimumDropped = 1, int maximumDropped = 1) => new CommonDropWithRerolls(itemId, dropsOutOfX, minimumDropped, maximumDropped, rerolls);
 		public static IItemDropRule ByCondition(IItemDropRuleCondition condition, int itemId, int dropsOutOfX = 1, int minimumDropped = 1, int maximumDropped = 1, int dropsXOutOfY = 1) => new ItemDropWithConditionRule(itemId, dropsOutOfX, minimumDropped, maximumDropped, condition, dropsXOutOfY);
-		public static IItemDropRule NotScalingWithLuck(int itemId, int dropsOutOfX = 1, int minimumDropped = 1, int maximumDropped = 1) => new CommonDropNotScalingWithLuck(itemId, dropsOutOfX, minimumDropped, maximumDropped);
+		public static IItemDropRule NotScalingWithLuck(int itemId, int dropsOutOfY = 1, int minimumDropped = 1, int maximumDropped = 1) => new CommonDropNotScalingWithLuck(itemId, dropsOutOfY, minimumDropped, maximumDropped);
 		public static IItemDropRule OneFromOptionsNotScalingWithLuck(int dropsOutOfX, params int[] options) => new OneFromOptionsNotScaledWithLuckDropRule(dropsOutOfX, 1, options);
 		public static IItemDropRule OneFromOptionsNotScalingWithLuckWithX(int dropsOutOfY, int xOutOfY, params int[] options) => new OneFromOptionsNotScaledWithLuckDropRule(dropsOutOfY, xOutOfY, options);
 		public static IItemDropRule OneFromOptions(int dropsOutOfX, params int[] options) => new OneFromOptionsDropRule(dropsOutOfX, 1, options);
