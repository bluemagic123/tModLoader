--- src/Terraria/Terraria/Tile.cs
+++ src/tModLoader/Terraria/Tile.cs
@@ -14,12 +_,15 @@
 		public ushort type;
 		public ushort wall;
 		public byte liquid;
-		public short sTileHeader;
+		public ushort sTileHeader; //For easier bitwise manipulations
 		public byte bTileHeader;
 		public byte bTileHeader2;
 		public byte bTileHeader3;
 		public short frameX;
 		public short frameY;
+		public bool countsAsWaterSource;
+		public bool countsAsHoneySource;
+		public bool countsAsLavaSource;
 		public const int Type_Solid = 0;
 		public const int Type_Halfbrick = 1;
 		public const int Type_SlopeDownRight = 2;
@@ -58,6 +_,9 @@
 			bTileHeader3 = 0;
 			frameX = 0;
 			frameY = 0;
+			countsAsWaterSource = false;
+			countsAsHoneySource = false;
+			countsAsLavaSource = false;
 		}
 
 		public Tile(Tile copy) {
@@ -71,6 +_,9 @@
 				bTileHeader3 = 0;
 				frameX = 0;
 				frameY = 0;
+				countsAsWaterSource = false;
+				countsAsHoneySource = false;
+				countsAsLavaSource = false;
 			}
 			else {
 				type = copy.type;
@@ -82,6 +_,9 @@
 				bTileHeader3 = copy.bTileHeader3;
 				frameX = copy.frameX;
 				frameY = copy.frameY;
+				countsAsWaterSource = copy.countsAsWaterSource;
+				countsAsHoneySource = copy.countsAsHoneySource;
+				countsAsLavaSource = copy.countsAsLavaSource;
 			}
 		}
 
@@ -97,6 +_,9 @@
 			bTileHeader3 = 0;
 			frameX = 0;
 			frameY = 0;
+			countsAsWaterSource = false;
+			countsAsHoneySource = false;
+			countsAsLavaSource = false;
 		}
 
 		public void ClearTile() {
@@ -116,6 +_,9 @@
 			bTileHeader3 = from.bTileHeader3;
 			frameX = from.frameX;
 			frameY = from.frameY;
+			countsAsWaterSource = from.countsAsWaterSource;
+			countsAsHoneySource = from.countsAsHoneySource;
+			countsAsLavaSource = from.countsAsLavaSource;
 		}
 
 		public bool isTheSameAs(Tile compTile) {
@@ -192,6 +_,9 @@
 			bTileHeader3 = 0;
 			frameX = 0;
 			frameY = 0;
+			countsAsWaterSource = false;
+			countsAsHoneySource = false;
+			countsAsLavaSource = false;
 			this.type = type;
 		}
 
@@ -203,6 +_,9 @@
 			bTileHeader3 = 0;
 			frameX = 0;
 			frameY = 0;
+			countsAsWaterSource = false;
+			countsAsHoneySource = false;
+			countsAsLavaSource = false;
 		}
 
 		public Color actColor(Color oldColor) {
@@ -329,7 +_,7 @@
 		public byte color() => (byte)(sTileHeader & 0x1F);
 
 		public void color(byte color) {
-			sTileHeader = (short)((sTileHeader & 0xFFE0) | color);
+			sTileHeader = (ushort)((sTileHeader & 0xFFE0) | color);
 		}
 
 		public bool active() => (sTileHeader & 0x20) == 32;
@@ -338,7 +_,7 @@
 			if (active)
 				sTileHeader |= 32;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFFDF);
+				sTileHeader = (ushort)(sTileHeader & 0xFFDF);
 		}
 
 		public bool inActive() => (sTileHeader & 0x40) == 64;
@@ -347,7 +_,7 @@
 			if (inActive)
 				sTileHeader |= 64;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFFBF);
+				sTileHeader = (ushort)(sTileHeader & 0xFFBF);
 		}
 
 		public bool wire() => (sTileHeader & 0x80) == 128;
@@ -356,7 +_,7 @@
 			if (wire)
 				sTileHeader |= 128;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFF7F);
+				sTileHeader = (ushort)(sTileHeader & 0xFF7F);
 		}
 
 		public bool wire2() => (sTileHeader & 0x100) == 256;
@@ -365,7 +_,7 @@
 			if (wire2)
 				sTileHeader |= 256;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFEFF);
+				sTileHeader = (ushort)(sTileHeader & 0xFEFF);
 		}
 
 		public bool wire3() => (sTileHeader & 0x200) == 512;
@@ -374,7 +_,7 @@
 			if (wire3)
 				sTileHeader |= 512;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFDFF);
+				sTileHeader = (ushort)(sTileHeader & 0xFDFF);
 		}
 
 		public bool halfBrick() => (sTileHeader & 0x400) == 1024;
@@ -383,7 +_,7 @@
 			if (halfBrick)
 				sTileHeader |= 1024;
 			else
-				sTileHeader = (short)(sTileHeader & 0xFBFF);
+				sTileHeader = (ushort)(sTileHeader & 0xFBFF);
 		}
 
 		public bool actuator() => (sTileHeader & 0x800) == 2048;
@@ -392,13 +_,13 @@
 			if (actuator)
 				sTileHeader |= 2048;
 			else
-				sTileHeader = (short)(sTileHeader & 0xF7FF);
+				sTileHeader = (ushort)(sTileHeader & 0xF7FF);
 		}
 
 		public byte slope() => (byte)((sTileHeader & 0x7000) >> 12);
 
 		public void slope(byte slope) {
-			sTileHeader = (short)((sTileHeader & 0x8FFF) | ((slope & 7) << 12));
+			sTileHeader = (ushort)((sTileHeader & 0x8FFF) | ((slope & 7) << 12));
 		}
 
 		public void Clear(TileDataType types) {
@@ -407,6 +_,9 @@
 				active(active: false);
 				frameX = 0;
 				frameY = 0;
+				countsAsWaterSource = false;
+				countsAsHoneySource = false;
+				countsAsLavaSource = false;
 			}
 
 			if ((types & TileDataType.Wall) != 0) {
