--- src/Terraria\Terraria\NPC.cs
+++ src/tModLoader\Terraria\NPC.cs
@@ -16,11 +_,38 @@
 using Terraria.Localization;
 using Terraria.Utilities;
 using Terraria.World.Generation;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
 	public class NPC : Entity
 	{
+		public ModNPC modNPC
+		{
+			get;
+			internal set;
+		}
+
+		internal GlobalNPC[] globalNPCs = new GlobalNPC[0];
+
+		/// <summary>Gets the global NPC. Use this overload when you dynamically add GlobalNPC manually.</summary>
+		public GlobalNPC GetGlobalNPC(Mod mod, string name)
+		{
+			return NPCLoader.GetGlobalNPC(this, mod, name);
+		}
+
+		/// <summary>Gets the global NPC. Use this overload when you know only 1 instance will ever be added by this particular mod.</summary>
+		public T GetGlobalNPC<T>(Mod mod) where T : GlobalNPC
+		{
+			return (T)GetGlobalNPC(mod, typeof(T).Name);
+		}
+
+		/// <summary>Gets the global NPC. Use this overload when you know only 1 instance will ever be added among all mods. 99% of mods should use this.</summary>
+		public T GetGlobalNPC<T>() where T : GlobalNPC
+		{
+			return (T)NPCLoader.GetGlobalNPC(this, typeof(T));
+		}
+
 		private const int NPC_TARGETS_START = 300;
 		public const int MaxMoonLordCountdown = 3600;
 		public const float nameOverIncrement = 0.025f;
@@ -93,13 +_,13 @@
 		private static int townRangeY = NPC.sHeight;
 		public float npcSlots = 1f;
 		private static bool noSpawnCycle = false;
-		private static int activeTime = 750;
+		public static int activeTime = 750;
 		private static int defaultSpawnRate = 600;
 		private static int defaultMaxSpawns = 5;
 		public bool dontCountMe;
 		public int[] buffType = new int[5];
 		public int[] buffTime = new int[5];
-		public bool[] buffImmune = new bool[206];
+		public bool[] buffImmune = new bool[BuffLoader.BuffCount];
 		public bool midas;
 		public bool ichor;
 		public bool onFire;
@@ -583,7 +_,7 @@
 			for (int i = 0; i < 200; i++)
 			{
 				NPC nPC = Main.npc[i];
-				if (nPC.active && nPC.type >= 0 && nPC.type < 580)
+				if (nPC.active && nPC.type >= 0 && nPC.type < NPCLoader.NPCCount)
 				{
 					NPC.npcsFoundForCheckActive[nPC.type] = true;
 				}
@@ -1686,7 +_,7 @@
 						return "No-Eyed Wiley";
 				}
 			}
-			return "";
+			return NPCLoader.TownNPCName(npcType);
 		}
 
 		public NetworkText GetTypeNetName()
@@ -1894,7 +_,7 @@
 			{
 				return 24;
 			}
-			return -1;
+			return NPCHeadLoader.GetNPCHeadSlot(type);
 		}
 
 		public static int HeadIndexToType(int type)
@@ -1995,7 +_,7 @@
 			{
 				return 550;
 			}
-			return -1;
+			return NPCHeadLoader.GetNPCFromHeadSlot(type);
 		}
 
 		public int GetBossHeadTextureIndex()
@@ -2049,9 +_,12 @@
 			{
 				result = 12;
 			}
+			NPCLoader.BossHeadSlot(this, ref result);
 			return result;
 		}
 
+		//  Decompiled Version. New Patches for vanilla updates should merge here. Make sure to update new version below if new bosses are added.
+		/*
 		public float GetBossHeadRotation()
 		{
 			float result = 0f;
@@ -2095,6 +_,29 @@
 				result = this.rotation;
 			}
 			return result;
+		}
+		*/
+
+		// god bless yorai, vanilla checks 5 types
+		public float GetBossHeadRotation()
+		{
+			float rot = 0;
+			switch (type)
+			{
+				case NPCID.Plantera:
+				case NPCID.DungeonGuardian:
+					rot = rotation;
+					break;
+				case NPCID.SkeletronHead:
+				case NPCID.SkeletronPrime:
+					if (ai[1] == 1 || ai[1] == 2) rot = rotation;
+					break;
+				case NPCID.IceQueen:
+					if (ai[0] == 2) rot = rotation;
+					break;
+			}
+			NPCLoader.BossHeadRotation(this, ref rot);
+			return rot;
 		}
 
 		public SpriteEffects GetBossHeadSpriteEffects()
@@ -2105,6 +_,7 @@
 			{
 				result = SpriteEffects.FlipHorizontally;
 			}
+			NPCLoader.BossHeadSpriteEffects(this, ref result);
 			return result;
 		}
 
@@ -2791,6 +_,17 @@
 			}
 		}
 
+		public void CloneDefaults(int Type)
+		{
+			int originalType = this.type;
+			int originalNetID = this.netID;
+			ModNPC originalModEntity = this.modNPC;
+			this.SetDefaultsKeepPlayerInteraction(Type);
+			this.type = originalType;
+			this.netID = originalNetID;
+			this.modNPC = originalModEntity;
+		}
+
 		public void SetDefaultsKeepPlayerInteraction(int Type)
 		{
 			bool[] array = new bool[this.playerInteraction.Length];
@@ -2812,6 +_,8 @@
 				this.SetDefaultsFromNetId(Type);
 				return;
 			}
+			this.modNPC = null;
+			this.globalNPCs = new GlobalNPC[0];
 			this.waterMovementSpeed = (this.lavaMovementSpeed = 0.5f);
 			this.honeyMovementSpeed = 0.25f;
 			this.altTexture = 0;
@@ -2854,7 +_,11 @@
 				this.buffTime[k] = 0;
 				this.buffType[k] = 0;
 			}
-			for (int l = 0; l < 206; l++)
+			if (this.buffImmune.Length != BuffLoader.BuffCount)
+			{
+				Array.Resize(ref this.buffImmune, BuffLoader.BuffCount);
+			}
+			for (int l = 0; l < this.buffImmune.Length; l++)
 			{
 				this.buffImmune[l] = false;
 			}
@@ -11331,9 +_,10 @@
 				this.scale = 1f;
 				this.rarity = 1;
 			}
+			NPCLoader.SetDefaults(this);
 			if (flag)
 			{
-				for (int num2 = 0; num2 < 206; num2++)
+				for (int num2 = 0; num2 < this.buffImmune.Length; num2++)
 				{
 					this.buffImmune[num2] = true;
 				}
@@ -11494,6 +_,7 @@
 						num4++;
 					}
 				}
+				//patch file: num4, num5
 				for (int j = 1; j < num4; j++)
 				{
 					num5 += num6;
@@ -11721,6 +_,7 @@
 					this.damage = (int)((double)this.damage * 0.75);
 					break;
 			}
+			NPCLoader.ScaleExpertStats(this, num4, num5);
 			this.defDefense = this.defense;
 			this.defDamage = this.damage;
 			this.life = this.lifeMax;
@@ -11938,6 +_,11 @@
 		}
 
 		public void AI()
+		{
+			NPCLoader.NPCAI(this);
+		}
+
+		public void VanillaAI()
 		{
 			if (this.aiStyle == 0)
 			{
@@ -38060,6 +_,7 @@
 		private void AI_007_TownEntities()
 		{
 			int maxValue = 300;
+			//patch file: flag
 			bool flag = Main.raining;
 			if (!Main.dayTime)
 			{
@@ -38139,6 +_,7 @@
 					num += 0.15f;
 					this.defense += 8;
 				}
+				NPCLoader.BuffTownNPC(ref num, ref this.defense);
 			}
 			if (this.type == 142 && Main.netMode != 1 && !Main.xMas)
 			{
@@ -38218,7 +_,7 @@
 			{
 				NPC.savedAngler = true;
 			}
-			if (this.type >= 0 && this.type < 580 && NPCID.Sets.TownCritter[this.type] && this.target == 255)
+			if (this.type >= 0 && NPCID.Sets.TownCritter[this.type] && this.target == 255)
 			{
 				this.TargetClosest(true);
 				if (this.position.X < Main.player[this.target].position.X)
@@ -38404,7 +_,13 @@
 			{
 				for (int m = 0; m < 200; m++)
 				{
-					if (Main.npc[m].active && !Main.npc[m].friendly && Main.npc[m].damage > 0 && Main.npc[m].Distance(base.Center) < num6 && (this.type != 453 || !NPCID.Sets.Skeletons.Contains(Main.npc[m].netID)))
+					bool? modCanHit = NPCLoader.CanHitNPC(Main.npc[m], this);
+					if (modCanHit.HasValue && !modCanHit.Value)
+					{
+						continue;
+					}
+					bool canHitVal = modCanHit.HasValue && modCanHit.Value;
+					if (Main.npc[m].active && !Main.npc[m].friendly && Main.npc[m].damage > 0 && Main.npc[m].Distance(base.Center) < num6 && (this.type != 453 || !NPCID.Sets.Skeletons.Contains(Main.npc[m].netID) || canHitVal))
 					{
 						flag6 = true;
 						float num12 = Main.npc[m].Center.X - base.Center.X;
@@ -38649,7 +_,7 @@
 					if (this.closeDoor && ((this.position.X + (float)(this.width / 2)) / 16f > (float)(this.doorX + 2) || (this.position.X + (float)(this.width / 2)) / 16f < (float)(this.doorX - 2)))
 					{
 						Tile tileSafely = Framing.GetTileSafely(this.doorX, this.doorY);
-						if (tileSafely.type == 11)
+						if (TileLoader.CloseDoorID(tileSafely) >= 0)
 						{
 							bool flag10 = WorldGen.CloseDoor(this.doorX, this.doorY, false);
 							if (flag10)
@@ -38824,7 +_,7 @@
 						Tile tileSafely3 = Framing.GetTileSafely(num17, num18);
 						Tile tileSafely4 = Framing.GetTileSafely(num17, num18 - 1);
 						Tile tileSafely5 = Framing.GetTileSafely(num17, num18 - 2);
-						if (this.townNPC && tileSafely5.nactive() && (tileSafely5.type == 10 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag))
+						if (this.townNPC && tileSafely5.nactive() && (TileLoader.OpenDoorID(tileSafely5) >= 0 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag))
 						{
 							if (Main.netMode != 1)
 							{
@@ -39176,12 +_,17 @@
 					num23 = 589;
 					scaleFactor = 7f;
 					num24 = 22;
+					//patch file: num23, num24, num25, num26, scaleFactor, maxValue2
 					num25 = 1;
 					num26 = 10;
 					maxValue2 = 1;
 					knockBack = 2f;
 					num27 = 10f;
 				}
+				NPCLoader.TownNPCAttackStrength(this, ref num24, ref knockBack);
+				NPCLoader.TownNPCAttackCooldown(this, ref num26, ref maxValue2);
+				NPCLoader.TownNPCAttackProj(this, ref num23, ref num25);
+				NPCLoader.TownNPCAttackProjSpeed(this, ref scaleFactor, ref num27, ref num29);
 				if (Main.expertMode)
 				{
 					num24 = (int)((float)num24 * Main.expertNPCDamage);
@@ -39241,7 +_,7 @@
 				int num34 = 0;
 				int maxValue3 = 0;
 				float knockBack2 = 0f;
-				int num35 = 0;
+				float num35 = 0;
 				bool flag17 = false;
 				float num36 = 0f;
 				if ((float)NPCID.Sets.AttackTime[this.type] == this.ai[1])
@@ -39359,12 +_,14 @@
 				else if (this.type == 228)
 				{
 					num31 = 267;
+					//patch file: num31, num32, num33, scaleFactor2
 					scaleFactor2 = 14f;
 					num32 = 20;
 					num33 = 1;
 					num34 = 10;
 					maxValue3 = 1;
 					knockBack2 = 3f;
+					//patch file: num34, num35, num36, maxValue3, knockBack2
 					num35 = 6;
 					num36 = 0.4f;
 				}
@@ -39471,6 +_,11 @@
 						num36 = 0.1f;
 					}
 				}
+				NPCLoader.TownNPCAttackStrength(this, ref num32, ref knockBack2);
+				NPCLoader.TownNPCAttackCooldown(this, ref num34, ref maxValue3);
+				NPCLoader.TownNPCAttackProj(this, ref num31, ref num33);
+				NPCLoader.TownNPCAttackProjSpeed(this, ref scaleFactor2, ref num35, ref num36);
+				NPCLoader.TownNPCAttackShoot(this, ref flag17);
 				if (Main.expertMode)
 				{
 					num32 = (int)((float)num32 * Main.expertNPCDamage);
@@ -39581,21 +_,25 @@
 				if (this.type == 54)
 				{
 					num41 = 585;
+					//patch file: num41, scaleFactor3
 					scaleFactor3 = 10f;
 					num42 = 16;
 					num43 = 30;
+					//patch file: num42, num43, num44, maxValue4, knockBack3
 					num44 = 20;
 					maxValue4 = 15;
 					knockBack3 = 2f;
 					num48 = 1f;
 				}
 				else if (this.type == 108)
+				//patch file: num48
 				{
 					num41 = 15;
 					scaleFactor3 = 6f;
 					num42 = 18;
 					num43 = 15;
 					num44 = 15;
+					//patch file: num45
 					maxValue4 = 5;
 					knockBack3 = 3f;
 					num45 = 20f;
@@ -39621,6 +_,11 @@
 					maxValue4 = 1;
 					knockBack3 = 3f;
 				}
+				NPCLoader.TownNPCAttackStrength(this, ref num42, ref knockBack3);
+				NPCLoader.TownNPCAttackCooldown(this, ref num44, ref maxValue4);
+				NPCLoader.TownNPCAttackProj(this, ref num41, ref num43);
+				NPCLoader.TownNPCAttackProjSpeed(this, ref scaleFactor3, ref num45, ref num48);
+				NPCLoader.TownNPCAttackMagic(this, ref num47);
 				if (Main.expertMode)
 				{
 					num42 = (int)((float)num42 * Main.expertNPCDamage);
@@ -39745,11 +_,15 @@
 				else if (this.type == 353)
 				{
 					num58 = 10;
+					//patch file: num57, num58, num60, num61
 					num61 = (num60 = 32);
 					num57 = 15;
 					maxValue5 = 8;
 					num59 = 5f;
 				}
+				NPCLoader.TownNPCAttackStrength(this, ref num58, ref num59);
+				NPCLoader.TownNPCAttackCooldown(this, ref num57, ref maxValue5);
+				NPCLoader.TownNPCAttackSwing(this, ref num60, ref num61);
 				if (Main.expertMode)
 				{
 					num58 = (int)((float)num58 * Main.expertNPCDamage);
@@ -43965,7 +_,7 @@
 							}
 							else
 							{
-								if (Main.tile[num177, num178 - 1].type == 10)
+								if (TileLoader.OpenDoorID(Main.tile[num177, num178 - 1]) >= 0)
 								{
 									bool flag25 = WorldGen.OpenDoor(num177, num178 - 1, this.direction);
 									if (!flag25)
@@ -45002,7 +_,7 @@
 								bool flag3 = tileSafely.active() && Main.tileSolid[(int)tileSafely.type] && !Main.tileFrameImportant[(int)tileSafely.type];
 								if (flag2 && flag3)
 								{
-									int num38 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely);
+									int num38 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, i, j);
 									for (int k = 0; k < num38; k++)
 									{
 										Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
@@ -46830,6 +_,7 @@
 							}
 							else
 							{
+								// TODO something like: if (TileLoader.OpenDoorID(Main.tile[num210, num211 - 1]) >= 0)
 								if (tileSafely4.type == 10)
 								{
 									bool flag40 = WorldGen.OpenDoor(num54, num55 - 1, this.direction);
@@ -49239,7 +_,7 @@
 
 		public bool UsesPartyHat()
 		{
-			return this.frame.Height > 0 && this.townNPC && BirthdayParty.PartyIsUp && this.type != 441 && this.type != 37;
+			return this.frame.Height > 0 && this.townNPC && BirthdayParty.PartyIsUp && this.type != 441 && this.type != 37 && NPCLoader.UsesPartyHat(this);
 		}
 
 		public PartyHatColor GetPartyHatColor()
@@ -49274,6 +_,11 @@
 				}
 				num = Main.npcTexture[this.type].Height / Main.npcFrameCount[this.type];
 			}
+			NPCLoader.FindFrame(this, num);
+		}
+
+		public void VanillaFindFrame(int num)
+		{
 			int num2 = 0;
 			if (this.aiAction == 0)
 			{
@@ -58063,7 +_,11 @@
 					{
 						number2 = 5;
 					}
-					NetMessage.SendData(34, -1, -1, null, number2, (float)x, (float)y, 0f, number, 0, 0);
+					if (Main.tile[x, y].type >= TileID.Count)
+					{
+						number2 = 101;
+					}
+					NetMessage.SendData(34, -1, -1, null, number2, (float)x, (float)y, 0f, number, Main.tile[x, y].type, 0);
 					NetMessage.SendTileSquare(-1, x, y, 3, TileChangeType.None);
 				}
 				int num7 = 475;
@@ -58522,6 +_,10 @@
 				}
 				return;
 				IL_2B1:
+				if (!NPCLoader.CheckActive(this))
+				{
+					return;
+				}
 				if (this.townNPC)
 				{
 					Rectangle rectangle = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)NPC.townRangeX), (int)(this.position.Y + (float)(this.height / 2) - (float)NPC.townRangeY), NPC.townRangeX * 2, NPC.townRangeY * 2);
@@ -58729,6 +_,10 @@
 					this.life = this.lifeMax;
 					this.dontTakeDamageFromHostiles = true;
 					this.netUpdate = true;
+					return;
+				}
+				if (!NPCLoader.CheckDead(this))
+				{
 					return;
 				}
 				NPC.noSpawnCycle = true;
@@ -59471,7 +_,7 @@
 
 		public static void ResetKillCount()
 		{
-			for (int i = 0; i < 580; i++)
+			for (int i = 0; i < NPC.killCount.Length; i++)
 			{
 				NPC.killCount[i] = 0;
 			}
@@ -59501,7 +_,7 @@
 
 		public void NPCLoot()
 		{
-			if (Main.netMode == 1 || this.type >= 580)
+			if (Main.netMode == 1)
 			{
 				return;
 			}
@@ -59600,6 +_,10 @@
 							NetMessage.BroadcastChatMessage(networkText, new Color(250, 250, 0), -1);
 						}
 						int num7 = Item.BannerToItem(num3);
+						if (num3 >= NPCID.Count)
+						{
+							num7 = NPCLoader.bannerToItem[NPCLoader.GetNPC(num3).banner];
+						}
 						Vector2 position = this.position;
 						if (num6 >= 0 && num6 < 255)
 						{
@@ -59621,6 +_,10 @@
 			{
 				return;
 			}
+			if (!NPCLoader.PreNPCLoot(this))
+  			{
+  				return;
+  			}
 			if ((this.type == 170 || this.type == 180 || this.type == 171) && Main.rand.Next(3) == 0)
 			{
 				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3532, 1, false, 0, false, false);
@@ -59737,7 +_,7 @@
 			if (this.type == 1 && this.ai[1] > 0f)
 			{
 				int num9 = (int)this.ai[1];
-				if (num9 > 0 && num9 < 3930)
+				if (num9 > 0)
 				{
 					int num10 = 1;
 					if (num9 == 8)
@@ -63095,6 +_,7 @@
 				{
 					num74 = 499;
 				}
+				NPCLoader.BossLoot(this, ref typeName, ref num74);
 				Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, num74, stack5, false, 0, false, false);
 				int num75 = Main.rand.Next(5) + 5;
 				for (int num76 = 0; num76 < num75; num76++)
@@ -63174,6 +_,7 @@
 					NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key, new object[0]), new Color(50, 255, 130), -1);
 				}
 			}
+			NPCLoader.NPCLoot(this);
 			if (this.type != 16 && this.type != 81 && this.type != 121 && Main.rand.Next(6) == 0 && this.lifeMax > 1 && this.damage > 0)
 			{
 				int num77 = (int)Player.FindClosest(this.position, this.width, this.height);
@@ -63380,6 +_,7 @@
 			{
 				itemType = 3860;
 			}
+			NPCLoader.BossBag(this, ref itemType);
 			this.DropItemInstanced(this.position, base.Size, itemType, 1, true);
 		}
 
@@ -63731,12 +_,13 @@
 					bool flag9 = false;
 					bool flag10 = false;
 					bool flag11 = false;
-					bool flag12 = NPC.downedPlantBoss && Main.hardMode;
+					bool flag12 = NPC.downedPlantBoss && Main.hardMode; //patch file: flag12
 					if (Main.player[j].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && (double)Main.player[j].position.Y < Main.worldSurface * 16.0 + (double)NPC.sHeight)
 					{
 						int num5 = 3000;
 						if ((double)Main.player[j].position.X > Main.invasionX * 16.0 - (double)num5 && (double)Main.player[j].position.X < Main.invasionX * 16.0 + (double)num5)
 						{
+							//patch file: flag4
 							flag4 = true;
 						}
 						else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5))
@@ -64027,6 +_,7 @@
 						else if (Main.player[j].townNPCs >= 3f)
 						{
 							flag3 = true;
+							//patch file: flag3, flag10
 							if (!Main.expertMode || Main.rand.Next(30) != 0)
 							{
 								flag10 = true;
@@ -64034,6 +_,7 @@
 							NPC.maxSpawns = (int)((double)((float)NPC.maxSpawns) * 0.6);
 						}
 					}
+					NPCLoader.EditSpawnRate(Main.player[j], ref NPC.spawnRate, ref NPC.maxSpawns);
 					int num6 = (int)(Main.player[j].position.X + (float)(Main.player[j].width / 2)) / 16;
 					int num7 = (int)(Main.player[j].position.Y + (float)(Main.player[j].height / 2)) / 16;
 					if (Main.wallHouse[(int)Main.tile[num6, num7].wall])
@@ -64042,6 +_,7 @@
 					}
 					if (Main.tile[num6, num7].wall == 87)
 					{
+						//patch file: flag2
 						flag2 = true;
 					}
 					bool flag14 = false;
@@ -64075,6 +_,8 @@
 							NPC.safeRangeX += (int)((double)(NPC.sWidth / 16) * 0.5 / (double)num8);
 							NPC.safeRangeY += (int)((double)(NPC.sHeight / 16) * 0.5 / (double)num8);
 						}
+						NPCLoader.EditSpawnRange(Main.player[j], ref NPC.spawnRangeX, ref NPC.spawnRangeY,
+							ref NPC.safeRangeX, ref NPC.safeRangeY);
 						int num9 = (int)(Main.player[j].position.X / 16f) - NPC.spawnRangeX;
 						int num10 = (int)(Main.player[j].position.X / 16f) + NPC.spawnRangeX;
 						int num11 = (int)(Main.player[j].position.Y / 16f) - NPC.spawnRangeY;
@@ -64194,6 +_,7 @@
 								}
 								if (num >= num13 && num <= num14)
 								{
+									//patch file(?): flag14
 									flag14 = true;
 									goto IL_1540;
 								}
@@ -64225,6 +_,7 @@
 							}
 						}
 					}
+					NPCSpawnInfo spawnInfo = new NPCSpawnInfo();
 					if (flag13)
 					{
 						if (Main.player[j].ZoneDungeon && (!Main.tileDungeon[(int)Main.tile[num, num2].type] || Main.tile[num, num2 - 1].wall == 0))
@@ -64233,10 +_,12 @@
 						}
 						if (Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 2].liquid > 0 && !Main.tile[num, num2 - 1].lava())
 						{
+							//patch file: flag6
 							if (Main.tile[num, num2 - 1].honey())
 							{
 								flag6 = true;
 							}
+							//patch file: flag5
 							else
 							{
 								flag5 = true;
@@ -64244,12 +_,15 @@
 						}
 						int num25 = (int)Main.player[j].Center.X / 16;
 						int num26 = (int)(Main.player[j].Bottom.Y + 8f) / 16;
+						spawnInfo.playerFloorX = num25;
+						spawnInfo.playerFloorY = num26;
 						if (Main.tile[num, num2].type == 367)
 						{
 							flag8 = true;
 						}
 						else if (Main.tile[num, num2].type == 368)
 						{
+							//patch file: flag7
 							flag7 = true;
 						}
 						else if (Main.tile[num25, num26].type == 367)
@@ -64349,6 +_,7 @@
 										{
 											if (Main.tile[num36, num37].wall == 62)
 											{
+												//patch file: flag9
 												flag9 = true;
 											}
 										}
@@ -64378,6 +_,7 @@
 										{
 											if (WallID.Sets.Conversion.Sandstone[(int)Main.tile[num41, num42].wall] || WallID.Sets.Conversion.HardenedSand[(int)Main.tile[num41, num42].wall])
 											{
+												//patch file: flag11
 												flag11 = true;
 											}
 										}
@@ -64394,8 +_,34 @@
 								}
 							}
 						}
+						spawnInfo.spawnTileX = num;
+						spawnInfo.spawnTileY = num2;
+						spawnInfo.spawnTileType = num3;
+						spawnInfo.player = Main.player[j];
+						spawnInfo.sky = flag;
+						spawnInfo.lihzahrd = flag2;
+						spawnInfo.playerSafe = flag3;
+						spawnInfo.invasion = flag4;
+						spawnInfo.water = flag5;
+						spawnInfo.granite = flag7;
+						spawnInfo.marble = flag8;
+						spawnInfo.spiderCave = flag9;
+						spawnInfo.playerInTown = flag10;
+						spawnInfo.desertCave = flag11;
+						spawnInfo.planteraDefeated = flag12;
+						spawnInfo.safeRangeX = flag14;
 						int num45 = (int)Main.tile[num, num2].type;
 						int num46 = 200;
+						int? spawnChoice = NPCLoader.ChooseSpawn(spawnInfo);
+						if (!spawnChoice.HasValue)
+						{
+							return;
+						}
+						int spawn = spawnChoice.Value;
+						if (spawn != 0)
+						{
+							goto endVanillaSpawn;
+						}
 						if (Main.player[j].ZoneTowerNebula)
 						{
 							bool flag15 = true;
@@ -67439,6 +_,11 @@
 						{
 							num46 = NPC.NewNPC(num * 16 + 8, num2 * 16, 49, 0, 0f, 0f, 0f, 0f, 255);
 						}
+						endVanillaSpawn: //this ugly code is just to minimize the diff file
+						if (spawn != 0)
+						{
+							num46 = NPCLoader.SpawnNPC(spawn, num, num2);
+						}
 						if (Main.npc[num46].type == 1 && Main.rand.Next(180) == 0)
 						{
 							Main.npc[num46].SetDefaults(-4, -1f);
@@ -68252,14 +_,17 @@
 			{
 				num2 = 0;
 			}
-			num = Main.CalculateDamage((int)num, num2);
-			if (crit)
-			{
-				num *= 2.0;
-			}
-			if (this.takenDamageMultiplier > 1f)
-			{
-				num *= (double)this.takenDamageMultiplier;
+			if (NPCLoader.StrikeNPC(this, ref num, num2, ref knockBack, hitDirection, ref crit))
+			{
+				num = Main.CalculateDamage((int)num, num2);
+				if (crit)
+				{
+					num *= 2.0;
+				}
+				if (this.takenDamageMultiplier > 1f)
+				{
+					num *= (double)this.takenDamageMultiplier;
+				}
 			}
 			if ((this.takenDamageMultiplier > 1f || Damage != 9999) && this.lifeMax > 1)
 			{
@@ -68509,6 +_,11 @@
 		}
 
 		public void HitEffect(int hitDirection = 0, double dmg = 10.0)
+		{
+			NPCLoader.HitEffect(this, hitDirection, dmg);
+		}
+
+		public void VanillaHitEffect(int hitDirection = 0, double dmg = 10.0)
 		{
 			if (!this.active)
 			{
@@ -76322,7 +_,10 @@
 			{
 				if (this.buffType[i] == type)
 				{
-					if (this.buffTime[i] < time)
+					if (BuffLoader.ReApply(type, this, time, i))
+					{
+					}
+					else if (this.buffTime[i] < time)
 					{
 						this.buffTime[i] = time;
 					}
@@ -76667,6 +_,7 @@
 					}
 				}
 				this.UpdateNPC_BuffFlagsReset();
+				NPCLoader.ResetEffects(this);
 				this.UpdateNPC_BuffSetFlags();
 				this.UpdateNPC_SoulDrainDebuff();
 				this.UpdateNPC_BuffClearExpiredBuffs();
@@ -77339,6 +_,7 @@
 						num = 5;
 					}
 				}
+				NPCLoader.UpdateLifeRegen(this, ref num);
 				if (this.lifeRegen <= -240 && num < 2)
 				{
 					num = 2;
@@ -77576,6 +_,7 @@
 					{
 						this.oiled = true;
 					}
+					BuffLoader.Update(this.buffType[i], this, ref i); // todo, move?
 				}
 			}
 		}
@@ -77806,22 +_,30 @@
 						Rectangle hitbox2 = nPC.Hitbox;
 						float num3 = 1f;
 						NPC.GetMeleeCollisionData(hitbox, i, ref num, ref num3, ref hitbox2);
-						if (hitbox.Intersects(hitbox2) && (this.type != 453 || !NPCID.Sets.Skeletons.Contains(nPC.netID)))
+						bool? modCanHit = NPCLoader.CanHitNPC(Main.npc[i], this);
+						if (modCanHit.HasValue && !modCanHit.Value)
+						{
+							continue;
+						}
+						if (hitbox.Intersects(hitbox2) && ((modCanHit.HasValue && modCanHit.Value) || this.type != 453 || !NPCID.Sets.Skeletons.Contains(nPC.netID)))
 						{
 							int num4 = nPC.damage;
-							int num5 = 6;
+							float num5 = 6;
 							int num6 = 1;
 							if (nPC.position.X + (float)(nPC.width / 2) > this.position.X + (float)(this.width / 2))
 							{
 								num6 = -1;
 							}
-							double num7 = this.StrikeNPCNoInteraction(num4, (float)num5, num6, false, false, false);
+							bool crit = false;
+							NPCLoader.ModifyHitNPC(nPC, this, ref num4, ref num5, ref crit);
+							double num7 = this.StrikeNPCNoInteraction(num4, (float)num5, num6, crit, false, false);
 							if (Main.netMode != 0)
 							{
 								NetMessage.SendData(28, -1, -1, null, this.whoAmI, (float)num4, (float)num5, (float)num6, 0, 0, 0);
 							}
 							this.netUpdate = true;
 							this.immune[255] = num2;
+							NPCLoader.OnHitNPC(nPC, this, (int)num7, num5, crit);
 							if (this.dryadWard)
 							{
 								num4 = (int)num7 / 3;
@@ -78585,6 +_,11 @@
 
 		public Color GetAlpha(Color newColor)
 		{
+			Color? modColor = NPCLoader.GetAlpha(this, newColor);
+			if (modColor.HasValue)
+			{
+				return modColor.Value;
+			}
 			float num = (float)(255 - this.alpha) / 255f;
 			int num2 = (int)((float)newColor.R * num);
 			int num3 = (int)((float)newColor.G * num);
@@ -80543,6 +_,7 @@
 			{
 				result = Lang.BartenderChat(this);
 			}
+			NPCLoader.GetChat(this, ref result);
 			return result;
 		}
 

