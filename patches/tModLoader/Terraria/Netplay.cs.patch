--- src/Terraria\Terraria\Netplay.cs
+++ src/tModLoader\Terraria\Netplay.cs
@@ -1,5 +_,7 @@
 using System;
+using System.Collections.Concurrent;
 using System.IO;
+using System.Linq;
 using System.Net;
 using System.Net.Sockets;
 
@@ -7,6 +_,7 @@
 using System.Runtime.CompilerServices;
 #endif
 using System.Threading;
+using System.Threading.Tasks;
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Net;
@@ -17,7 +_,7 @@
 #if !WINDOWS
 using Terraria.Social.Base;
 #endif
-#if SERVER
+#if SERVER && WINDOWS
 using NATUPNPLib;
 #endif
 namespace Terraria
@@ -41,7 +_,7 @@
 		public static bool spamCheck = false;
 		public static bool anyClients = false;
 		private static Thread ServerThread;
-		#if SERVER
+#if SERVER && WINDOWS
 		public static UPnPNAT upnpnat;
 		public static IStaticPortMappingCollection mappings;
 #endif
@@ -51,11 +_,27 @@
 
 		public static event Action OnDisconnect;
 
+		private static readonly ConcurrentQueue<Task> mainThreadTasks = new ConcurrentQueue<Task>();
+
+		internal static void OnUpdate()
+		{
+			Task t;
+			while (mainThreadTasks.TryDequeue(out t))
+				t.RunSynchronously();
+		}
+
+		private static void InvokeOnMainThread(Action action)
+		{
+			var t = new Task(action);
+			mainThreadTasks.Enqueue(t);
+			t.Wait();
+		}
+
 		private static void OpenPort()
 		{
 			Netplay.portForwardIP = Netplay.GetLocalIPAddress();
 			Netplay.portForwardPort = Netplay.ListenPort;
-#if SERVER
+#if SERVER && WINDOWS
 			if (Netplay.upnpnat == null)
 			{
 				Netplay.upnpnat = (UPnPNAT)Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("AE1E00AA-3FD5-403C-8A27-2BBDC30CD0E1")));
@@ -81,7 +_,7 @@
 
 		public static void closePort()
 		{
-#if SERVER
+#if SERVER && WINDOWS
 			if (Netplay.portForwardOpen)
 			{
 				Netplay.mappings.Remove(Netplay.portForwardPort, "TCP");
@@ -264,9 +_,11 @@
 			}
 			Netplay.disconnect = false;
 			Netplay.Connection = new RemoteServer();
-			Netplay.Connection.ReadBuffer = new byte[1024];
-		}
-
+			Netplay.Connection.ReadBuffer = new byte[ushort.MaxValue];
+		}
+
+
+		internal static bool syncingWorld = false;
 		private static void InnerClientLoop()
 		{
 			try
@@ -279,7 +_,7 @@
 					{
 						if (NetMessage.buffer[256].checkBytes)
 						{
-							NetMessage.CheckBytes(256);
+							InvokeOnMainThread(() => NetMessage.CheckBytes(256));
 						}
 						Netplay.Connection.IsActive = true;
 						if (Netplay.Connection.State == 0)
@@ -332,6 +_,7 @@
 						{
 							Netplay.Connection.State = 6;
 							Main.player[Main.myPlayer].FindSpawn();
+							Netplay.syncingWorld = true;
 							NetMessage.SendData(8, -1, -1, null, Main.player[Main.myPlayer].SpawnX, (float)Main.player[Main.myPlayer].SpawnY, 0f, 0f, 0, 0, 0);
 						}
 						if (Netplay.Connection.State == 6 && num != Netplay.Connection.State)
@@ -363,7 +_,6 @@
 									});
 							}
 						}
-						Thread.Sleep(1);
 					}
 					else if (Netplay.Connection.IsActive)
 					{
@@ -372,6 +_,7 @@
 					}
 					num = Netplay.Connection.State;
 				}
+				Netplay.syncingWorld = false;
 				try
 				{
 					Netplay.Connection.Socket.Close();
@@ -443,7 +_,7 @@
 			{
 				Netplay.Clients[num].Reset();
 				Netplay.Clients[num].Socket = client;
-				Console.WriteLine(Language.GetTextValue("Net.ClientConnecting", client.GetRemoteAddress()));
+				//Console.WriteLine(Language.GetTextValue("Net.ClientConnecting", client.GetRemoteAddress()));
 			}
 			if (Netplay.FindNextOpenClientSlot() == -1)
 			{
@@ -550,18 +_,26 @@
 				}
 				IL_156:
 				int num3 = 0;
+				if (NetMessage.buffer.Any(b => b.checkBytes) || Clients.Any(c => c.PendingTermination))
+				{
+					InvokeOnMainThread(() =>
+					{
+						for (int k = 0; k < 256; k++)
+						{
+							if (NetMessage.buffer[k].checkBytes)
+							{
+								NetMessage.CheckBytes(k);
+							}
+							if (Netplay.Clients[k].PendingTermination)
+							{
+								Netplay.Clients[k].Reset();
+								NetMessage.SyncDisconnectedPlayer(k);
+							}
+						}
+					});
+				}
 				for (int k = 0; k < 256; k++)
 				{
-					if (NetMessage.buffer[k].checkBytes)
-					{
-						NetMessage.CheckBytes(k);
-					}
-					if (Netplay.Clients[k].PendingTermination)
-					{
-						Netplay.Clients[k].Reset();
-						NetMessage.SyncDisconnectedPlayer(k);
-					}
-					else
 					{
 						if (Netplay.Clients[k].IsConnected())
 						{

